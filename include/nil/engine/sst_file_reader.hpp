#pragma once



#include <nil/engine/iterator.hpp>
#include <nil/engine/options.hpp>
#include <nil/engine/slice.hpp>
#include <nil/engine/table_properties.hpp>

namespace nil {
    namespace dcdb {

// sst_file_reader is used to read sst files that are generated by database or
// sst_file_writer.
        class sst_file_reader {
        public:
            sst_file_reader(const options &opts);

            ~sst_file_reader();

            // Prepares to read from the file located at "file_path".
            status_type open(const std::string &file_path);

            // Returns a new iterator over the table contents.
            // Most read opts provide the same control as we read from database.
            // If "get_snapshot" is nullptr, the iterator returns only the latest keys.
            iterator *new_iterator(const read_options &options);

            std::shared_ptr<const table_properties> get_table_properties() const;

            // Verifies whether there is corruption in this table.
            status_type verify_checksum();

        private:
            struct Rep;
            std::unique_ptr<Rep> rep_;
        };

    }
} // namespace nil

#endif  // !DCDB_LITE
